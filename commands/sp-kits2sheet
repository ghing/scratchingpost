#!/usr/bin/env node

var program = require('commander');
var biplane = require('biplane');
var Spreadsheet = require('edit-google-spreadsheet');
var redis = require('redis');
var async = require('async');
var moment = require('moment');
var _ = require('lodash');

if (process.env.REDISTOGO_URL) {
  var rtg = require("url").parse(process.env.REDISTOGO_URL);
  var redisClient = require("redis").createClient(rtg.port, rtg.hostname);

  redisClient.auth(rtg.auth.split(":")[1]);  
}
else {
  var redisClient = redis.createClient();
}

redisClient.on("error", function (err) {
  console.log("Error " + err);
});

program.version('0.0.1')
  .option('-d, --debug', 'Show debugging information')
  .parse(process.argv);

var api = new biplane.Biplane({
  baseUrl: process.env.SCRATCHINGPOST_AIRPLANE_URL, 
  username: process.env.SCRATCHINGPOST_USERNAME,
  password: process.env.SCRATCHINGPOST_PASSWORD
});

var profilesById;
var jobIds = [];
var rowsToAdd = [];
var SEEN_KEY = 'scratchingpost:jobs:seen';
// Date format for querying KITS
var queryFormat = 'MM-DD-YYYY';
// Date format for writing to Google Spreadsheet
var spreadsheetFormat = 'MM/DD/YYYY HH:mm:ss';
var yesterday = moment().subtract('days', 1);

function handleJob(job, callback) {
  redisClient.sismember(SEEN_KEY, job.id, function(err, res) {
    if (res === 0) {
      var ownerProfile = profilesById[job.ownerId];
      var clientProfile = profilesById[job.clientId];
      rowsToAdd.push([
        moment(job.created).format(spreadsheetFormat),
        moment(job.deliverAfter).format(spreadsheetFormat),
        job.id,
        job.ownerId,
        ownerProfile ? ownerProfile.name : '',
        job.clientId,
        clientProfile ? clientProfile.name : '',
        job.deliverTo,
        job.orderTotal,
        job.tip,
        job.deliveryFee,
        job.paymentMethod
      ]);
      jobIds.push(job.id);
    }

    callback();
  });
}

api.profiles(function(profiles) {
  // @todo: Cache profiles
  profilesById = _.indexBy(profiles, 'id');

  api.export({
    status: 'complete',
    start: yesterday.format(queryFormat),
    end: moment().format(queryFormat)
  }, function(jobs) {
    async.each(jobs, handleJob, function() {
      if (rowsToAdd.length === 0) {
        console.log("No new jobs");
        process.exit();
      }

      Spreadsheet.create({
        debug: program.debug, 
        username: process.env.SCRATCHINGPOST_USERNAME, 
        password: process.env.SCRATCHINGPOST_PASSWORD, 
        spreadsheetId: process.env.SCRATCHINGPOST_SPREADSHEET_ID,
        worksheetId: process.env.SCRATCHINGPOST_WORKSHEET_ID,
        callback: function(err, sheet) {
          if (err) throw err;
          sheet.receive(function(err, rows, info) {
            var data = {};
            data[info.nextRow] = rowsToAdd; 
            sheet.add(data);
            sheet.send({
              autoSize: true
            }, function(err) {
              if (err) {
                console.log(err);
                process.exit();
              }

              console.log("Uploaded " + rowsToAdd.length + " jobs");

              redisClient.sadd(SEEN_KEY, jobIds, function(err) {
                process.exit();
              });
            });
          });
        }
      });
    });
  });
});
